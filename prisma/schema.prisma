// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("RDB_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String
  provider          String             @default("local")
  password          String?            @db.VarChar(255)
  firstName         String?            @db.VarChar(30)
  lastName          String?            @db.VarChar(30)
  role              Role               @default(CUSTOMER)
  createdAt         DateTime           @default(now()) @db.Timestamp(0)
  updatedAt         DateTime           @updatedAt @db.Timestamp(0)
  Reservation       Reservation[]
  SellerApplication SellerApplication?

  @@unique([email])
  @@index([email])
}

enum Role {
  CUSTOMER
  SELLER
  ADMIN
}

model SellerApplication {
  id          String            @id @default(uuid())
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  description String
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now()) @db.Timestamp(0)
  updatedAt   DateTime          @updatedAt @db.Timestamp(0)

  @@unique([userId])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Place {
  id           String   @id @default(uuid())
  city         String
  district     String
  street       String
  streetNumber Int
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @db.Timestamp(0)
  Event        Event[]

  @@index([city, district, street])
}

model Event {
  id          String    @id @default(uuid())
  name        String
  description String?
  date        DateTime
  eventType   EventType
  place       Place     @relation(fields: [placeId], references: [id])
  placeId     String
  createdAt   DateTime  @default(now()) @db.Timestamp(0)
  updatedAt   DateTime  @updatedAt @db.Timestamp(0)

  Reservations Reservation[]
  Ticket       Ticket[]

  @@index([date])
}

enum EventType {
  SEATING // 좌석이 구분됨
  STANDING // 좌석이 구분되지 않음
}

model Ticket {
  id            String       @id @default(uuid())
  event         Event        @relation(fields: [eventId], references: [id])
  eventId       String
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  reservationId String?
  price         Float
  seatNumber    Int
  checkInCode   String
  image         String
  isAvailable   Boolean      @default(true)
  createdAt     DateTime     @default(now()) @db.Timestamp(0)
  updatedAt     DateTime     @updatedAt @db.Timestamp(0)

  @@index([id, isAvailable])
  @@index([eventId, isAvailable])
}

model Reservation {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
  Payment   Payment?
  Ticket    Ticket[]

  @@index([userId])
  @@index([eventId])
}

model Payment {
  id            String        @id @default(uuid())
  reservation   Reservation   @relation(fields: [reservationId], references: [id])
  reservationId String
  amount        Float
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now()) @db.Timestamp(0)
  updatedAt     DateTime      @updatedAt @db.Timestamp(0)

  @@unique([reservationId])
  @@index([reservationId])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
